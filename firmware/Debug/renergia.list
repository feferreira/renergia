
renergia.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008a8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a6c  08000a6c  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  08000a6c  08000a6c  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a6c  08000a6c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a6c  08000a6c  00010a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a70  08000a70  00010a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  08000a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020058  2**0
                  CONTENTS
 10 .bss          0000001c  20000058  20000058  00020058  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000074  20000074  00020058  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020082  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000928  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000275  00000000  00000000  000209ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000090  00000000  00000000  00020c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000062  00000000  00000000  00020cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003229f  00000000  00000000  00020d5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000afb  00000000  00000000  00052ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0008fe0b  00000000  00000000  00053af4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000014c  00000000  00000000  000e3900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000076  00000000  00000000  000e3a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000058 	.word	0x20000058
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000a3c 	.word	0x08000a3c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000005c 	.word	0x2000005c
 80001e8:	08000a3c 	.word	0x08000a3c

080001ec <_initLtdcPins>:
};

const uint8_t ltdcPinsArraySize = sizeof(ltdcPins)/sizeof(ltdcPins[0]);

static void _initLtdcPins()
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
	RCC_TypeDef *rcc = RCC;
 80001f2:	4b66      	ldr	r3, [pc, #408]	; (800038c <_initLtdcPins+0x1a0>)
 80001f4:	603b      	str	r3, [r7, #0]
	REG_SET_VAL(rcc->AHB1ENR, 0x1FF, 0x1FF, RCC_AHB1ENR_GPIOAEN_Pos);
 80001f6:	683b      	ldr	r3, [r7, #0]
 80001f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001fa:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 80001fe:	f023 0301 	bic.w	r3, r3, #1
 8000202:	683a      	ldr	r2, [r7, #0]
 8000204:	6313      	str	r3, [r2, #48]	; 0x30
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 800020e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
 8000212:	683a      	ldr	r2, [r7, #0]
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
	for(uint8_t i = 0; i < ltdcPinsArraySize; i++)
 8000216:	2300      	movs	r3, #0
 8000218:	71fb      	strb	r3, [r7, #7]
 800021a:	e0ac      	b.n	8000376 <_initLtdcPins+0x18a>
	{
		REG_SET_VAL(ltdcPorts[i]->MODER, 2U, 3U,(ltdcPins[i] * 2U));
 800021c:	79fb      	ldrb	r3, [r7, #7]
 800021e:	4a5c      	ldr	r2, [pc, #368]	; (8000390 <_initLtdcPins+0x1a4>)
 8000220:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000224:	6819      	ldr	r1, [r3, #0]
 8000226:	79fb      	ldrb	r3, [r7, #7]
 8000228:	4a5a      	ldr	r2, [pc, #360]	; (8000394 <_initLtdcPins+0x1a8>)
 800022a:	5cd3      	ldrb	r3, [r2, r3]
 800022c:	005b      	lsls	r3, r3, #1
 800022e:	2203      	movs	r2, #3
 8000230:	fa02 f303 	lsl.w	r3, r2, r3
 8000234:	43da      	mvns	r2, r3
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	4855      	ldr	r0, [pc, #340]	; (8000390 <_initLtdcPins+0x1a4>)
 800023a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800023e:	400a      	ands	r2, r1
 8000240:	601a      	str	r2, [r3, #0]
 8000242:	79fb      	ldrb	r3, [r7, #7]
 8000244:	4a52      	ldr	r2, [pc, #328]	; (8000390 <_initLtdcPins+0x1a4>)
 8000246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800024a:	6819      	ldr	r1, [r3, #0]
 800024c:	79fb      	ldrb	r3, [r7, #7]
 800024e:	4a51      	ldr	r2, [pc, #324]	; (8000394 <_initLtdcPins+0x1a8>)
 8000250:	5cd3      	ldrb	r3, [r2, r3]
 8000252:	005b      	lsls	r3, r3, #1
 8000254:	2202      	movs	r2, #2
 8000256:	409a      	lsls	r2, r3
 8000258:	79fb      	ldrb	r3, [r7, #7]
 800025a:	484d      	ldr	r0, [pc, #308]	; (8000390 <_initLtdcPins+0x1a4>)
 800025c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000260:	430a      	orrs	r2, r1
 8000262:	601a      	str	r2, [r3, #0]
		REG_CLR_BIT(ltdcPorts[i]->OTYPER, ltdcPins[i]);
 8000264:	79fb      	ldrb	r3, [r7, #7]
 8000266:	4a4a      	ldr	r2, [pc, #296]	; (8000390 <_initLtdcPins+0x1a4>)
 8000268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800026c:	6859      	ldr	r1, [r3, #4]
 800026e:	79fb      	ldrb	r3, [r7, #7]
 8000270:	4a48      	ldr	r2, [pc, #288]	; (8000394 <_initLtdcPins+0x1a8>)
 8000272:	5cd3      	ldrb	r3, [r2, r3]
 8000274:	461a      	mov	r2, r3
 8000276:	2301      	movs	r3, #1
 8000278:	4093      	lsls	r3, r2
 800027a:	43da      	mvns	r2, r3
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	4844      	ldr	r0, [pc, #272]	; (8000390 <_initLtdcPins+0x1a4>)
 8000280:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000284:	400a      	ands	r2, r1
 8000286:	605a      	str	r2, [r3, #4]
		REG_SET_VAL(ltdcPorts[i]->OSPEEDR, 2U, 3U, (ltdcPins[i] * 2U));
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	4a41      	ldr	r2, [pc, #260]	; (8000390 <_initLtdcPins+0x1a4>)
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	6899      	ldr	r1, [r3, #8]
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	4a3f      	ldr	r2, [pc, #252]	; (8000394 <_initLtdcPins+0x1a8>)
 8000296:	5cd3      	ldrb	r3, [r2, r3]
 8000298:	005b      	lsls	r3, r3, #1
 800029a:	2203      	movs	r2, #3
 800029c:	fa02 f303 	lsl.w	r3, r2, r3
 80002a0:	43da      	mvns	r2, r3
 80002a2:	79fb      	ldrb	r3, [r7, #7]
 80002a4:	483a      	ldr	r0, [pc, #232]	; (8000390 <_initLtdcPins+0x1a4>)
 80002a6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002aa:	400a      	ands	r2, r1
 80002ac:	609a      	str	r2, [r3, #8]
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4a37      	ldr	r2, [pc, #220]	; (8000390 <_initLtdcPins+0x1a4>)
 80002b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002b6:	6899      	ldr	r1, [r3, #8]
 80002b8:	79fb      	ldrb	r3, [r7, #7]
 80002ba:	4a36      	ldr	r2, [pc, #216]	; (8000394 <_initLtdcPins+0x1a8>)
 80002bc:	5cd3      	ldrb	r3, [r2, r3]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	2202      	movs	r2, #2
 80002c2:	409a      	lsls	r2, r3
 80002c4:	79fb      	ldrb	r3, [r7, #7]
 80002c6:	4832      	ldr	r0, [pc, #200]	; (8000390 <_initLtdcPins+0x1a4>)
 80002c8:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002cc:	430a      	orrs	r2, r1
 80002ce:	609a      	str	r2, [r3, #8]
		if(i < 8)
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	2b07      	cmp	r3, #7
 80002d4:	d824      	bhi.n	8000320 <_initLtdcPins+0x134>
		{
			REG_SET_VAL(ltdcPorts[i]->AFR[0], 14U, 0xFU, ltdcPins[i] * 4U);
 80002d6:	79fb      	ldrb	r3, [r7, #7]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	; (8000390 <_initLtdcPins+0x1a4>)
 80002da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002de:	6a19      	ldr	r1, [r3, #32]
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	4a2c      	ldr	r2, [pc, #176]	; (8000394 <_initLtdcPins+0x1a8>)
 80002e4:	5cd3      	ldrb	r3, [r2, r3]
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	220f      	movs	r2, #15
 80002ea:	fa02 f303 	lsl.w	r3, r2, r3
 80002ee:	43da      	mvns	r2, r3
 80002f0:	79fb      	ldrb	r3, [r7, #7]
 80002f2:	4827      	ldr	r0, [pc, #156]	; (8000390 <_initLtdcPins+0x1a4>)
 80002f4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80002f8:	400a      	ands	r2, r1
 80002fa:	621a      	str	r2, [r3, #32]
 80002fc:	79fb      	ldrb	r3, [r7, #7]
 80002fe:	4a24      	ldr	r2, [pc, #144]	; (8000390 <_initLtdcPins+0x1a4>)
 8000300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000304:	6a19      	ldr	r1, [r3, #32]
 8000306:	79fb      	ldrb	r3, [r7, #7]
 8000308:	4a22      	ldr	r2, [pc, #136]	; (8000394 <_initLtdcPins+0x1a8>)
 800030a:	5cd3      	ldrb	r3, [r2, r3]
 800030c:	009b      	lsls	r3, r3, #2
 800030e:	220e      	movs	r2, #14
 8000310:	409a      	lsls	r2, r3
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	481e      	ldr	r0, [pc, #120]	; (8000390 <_initLtdcPins+0x1a4>)
 8000316:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800031a:	430a      	orrs	r2, r1
 800031c:	621a      	str	r2, [r3, #32]
 800031e:	e027      	b.n	8000370 <_initLtdcPins+0x184>
		}
		else
		{
			REG_SET_VAL(ltdcPorts[i]->AFR[1], 14U, 0xFU, (ltdcPins[i] % 8U) * 4U);
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	4a1b      	ldr	r2, [pc, #108]	; (8000390 <_initLtdcPins+0x1a4>)
 8000324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000328:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800032a:	79fb      	ldrb	r3, [r7, #7]
 800032c:	4a19      	ldr	r2, [pc, #100]	; (8000394 <_initLtdcPins+0x1a8>)
 800032e:	5cd3      	ldrb	r3, [r2, r3]
 8000330:	f003 0307 	and.w	r3, r3, #7
 8000334:	009b      	lsls	r3, r3, #2
 8000336:	220f      	movs	r2, #15
 8000338:	fa02 f303 	lsl.w	r3, r2, r3
 800033c:	43da      	mvns	r2, r3
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	4813      	ldr	r0, [pc, #76]	; (8000390 <_initLtdcPins+0x1a4>)
 8000342:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8000346:	400a      	ands	r2, r1
 8000348:	625a      	str	r2, [r3, #36]	; 0x24
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	4a10      	ldr	r2, [pc, #64]	; (8000390 <_initLtdcPins+0x1a4>)
 800034e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000352:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000354:	79fb      	ldrb	r3, [r7, #7]
 8000356:	4a0f      	ldr	r2, [pc, #60]	; (8000394 <_initLtdcPins+0x1a8>)
 8000358:	5cd3      	ldrb	r3, [r2, r3]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	220e      	movs	r2, #14
 8000362:	409a      	lsls	r2, r3
 8000364:	79fb      	ldrb	r3, [r7, #7]
 8000366:	480a      	ldr	r0, [pc, #40]	; (8000390 <_initLtdcPins+0x1a4>)
 8000368:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800036c:	430a      	orrs	r2, r1
 800036e:	625a      	str	r2, [r3, #36]	; 0x24
	for(uint8_t i = 0; i < ltdcPinsArraySize; i++)
 8000370:	79fb      	ldrb	r3, [r7, #7]
 8000372:	3301      	adds	r3, #1
 8000374:	71fb      	strb	r3, [r7, #7]
 8000376:	2216      	movs	r2, #22
 8000378:	79fb      	ldrb	r3, [r7, #7]
 800037a:	4293      	cmp	r3, r2
 800037c:	f4ff af4e 	bcc.w	800021c <_initLtdcPins+0x30>
		}
	}

}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	370c      	adds	r7, #12
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800
 8000390:	20000000 	.word	0x20000000
 8000394:	08000a54 	.word	0x08000a54

08000398 <_initLtdc>:

static void _initLtdc()
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
	RCC_TypeDef *rcc = RCC;
 800039e:	4b56      	ldr	r3, [pc, #344]	; (80004f8 <_initLtdc+0x160>)
 80003a0:	607b      	str	r3, [r7, #4]
	LTDC_TypeDef *ltdc = LTDC;
 80003a2:	4b56      	ldr	r3, [pc, #344]	; (80004fc <_initLtdc+0x164>)
 80003a4:	603b      	str	r3, [r7, #0]
	REG_SET_BIT(rcc->APB2ENR, RCC_APB2ENR_LTDCEN_Pos);
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003aa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	645a      	str	r2, [r3, #68]	; 0x44
	//width in pixclock
	REG_SET_VAL(ltdc->SSCR, BSP_LCD_HSYNC_WIDTH-1, 0xFFFU, LTDC_SSCR_HSW_Pos);
 80003b2:	683b      	ldr	r3, [r7, #0]
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80003ba:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003be:	683a      	ldr	r2, [r7, #0]
 80003c0:	6093      	str	r3, [r2, #8]
 80003c2:	683b      	ldr	r3, [r7, #0]
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	f443 2210 	orr.w	r2, r3, #589824	; 0x90000
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(ltdc->SSCR, BSP_LCD_VSYNC_WIDTH-1, 0x7FFU, LTDC_SSCR_VSH_Pos);
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	689b      	ldr	r3, [r3, #8]
 80003d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80003d6:	f023 0307 	bic.w	r3, r3, #7
 80003da:	683a      	ldr	r2, [r7, #0]
 80003dc:	6093      	str	r3, [r2, #8]
 80003de:	683b      	ldr	r3, [r7, #0]
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f043 0201 	orr.w	r2, r3, #1
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	609a      	str	r2, [r3, #8]
	//back porch
	REG_SET_VAL(ltdc->BPCR, BSP_LCD_HSYNC_WIDTH+BSP_LCD_HSYNC_BP-1,0xFFFU,LTDC_BPCR_AHBP_Pos);
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	68db      	ldr	r3, [r3, #12]
 80003ee:	f023 637f 	bic.w	r3, r3, #267386880	; 0xff00000
 80003f2:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 80003f6:	683a      	ldr	r2, [r7, #0]
 80003f8:	60d3      	str	r3, [r2, #12]
 80003fa:	683b      	ldr	r3, [r7, #0]
 80003fc:	68db      	ldr	r3, [r3, #12]
 80003fe:	f443 12e8 	orr.w	r2, r3, #1900544	; 0x1d0000
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	60da      	str	r2, [r3, #12]
	REG_SET_VAL(ltdc->BPCR, BSP_LCD_VSYNC_WIDTH+BSP_LCD_VSYNC_BP-1,0x7FFU,LTDC_BPCR_AVBP_Pos);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	68db      	ldr	r3, [r3, #12]
 800040a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800040e:	f023 0307 	bic.w	r3, r3, #7
 8000412:	683a      	ldr	r2, [r7, #0]
 8000414:	60d3      	str	r3, [r2, #12]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	f043 0203 	orr.w	r2, r3, #3
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	60da      	str	r2, [r3, #12]
	//active width
	REG_SET_VAL(ltdc->AWCR, BSP_LCD_HSYNC_WIDTH+BSP_LCD_HSYNC_BP+BSP_LCD_HSYNC_ADD-1, 0xFFFU,LTDC_AWCR_AAH_Pos);
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	691b      	ldr	r3, [r3, #16]
 8000426:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800042a:	f023 030f 	bic.w	r3, r3, #15
 800042e:	683a      	ldr	r2, [r7, #0]
 8000430:	6113      	str	r3, [r2, #16]
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	691b      	ldr	r3, [r3, #16]
 8000436:	f443 7386 	orr.w	r3, r3, #268	; 0x10c
 800043a:	f043 0301 	orr.w	r3, r3, #1
 800043e:	683a      	ldr	r2, [r7, #0]
 8000440:	6113      	str	r3, [r2, #16]
	REG_SET_VAL(ltdc->AWCR, BSP_LCD_VSYNC_WIDTH+BSP_LCD_VSYNC_BP+BSP_LCD_VSYNC_ADD-1, 0x7FFU,LTDC_AWCR_AAW_Pos);
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	691b      	ldr	r3, [r3, #16]
 8000446:	f023 63ff 	bic.w	r3, r3, #133693440	; 0x7f80000
 800044a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800044e:	683a      	ldr	r2, [r7, #0]
 8000450:	6113      	str	r3, [r2, #16]
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	691b      	ldr	r3, [r3, #16]
 8000456:	f043 73a1 	orr.w	r3, r3, #21102592	; 0x1420000
 800045a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	6113      	str	r3, [r2, #16]
	//total width
	REG_SET_VAL(ltdc->TWCR, BSP_LCD_HSYNC_WIDTH+BSP_LCD_HSYNC_BP+BSP_LCD_HSYNC_ADD+BSP_LCD_HSYNC_FP-1, 0xFFFU,LTDC_TWCR_TOTALH_Pos);
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	695b      	ldr	r3, [r3, #20]
 8000466:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800046a:	f023 030f 	bic.w	r3, r3, #15
 800046e:	683a      	ldr	r2, [r7, #0]
 8000470:	6153      	str	r3, [r2, #20]
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	f443 738b 	orr.w	r3, r3, #278	; 0x116
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	683a      	ldr	r2, [r7, #0]
 8000480:	6153      	str	r3, [r2, #20]
	REG_SET_VAL(ltdc->TWCR, BSP_LCD_VSYNC_WIDTH+BSP_LCD_VSYNC_BP+BSP_LCD_VSYNC_ADD+BSP_LCD_VSYNC_FP-1, 0x7FFU,LTDC_TWCR_TOTALW_Pos);
 8000482:	683b      	ldr	r3, [r7, #0]
 8000484:	695b      	ldr	r3, [r3, #20]
 8000486:	f023 63ff 	bic.w	r3, r3, #133693440	; 0x7f80000
 800048a:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800048e:	683a      	ldr	r2, [r7, #0]
 8000490:	6153      	str	r3, [r2, #20]
 8000492:	683b      	ldr	r3, [r7, #0]
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	f043 73a3 	orr.w	r3, r3, #21364736	; 0x1460000
 800049a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800049e:	683a      	ldr	r2, [r7, #0]
 80004a0:	6153      	str	r3, [r2, #20]

	//background color
	REG_SET_VAL(ltdc->BCCR, 0xFF, 0xFFUL, LTDC_BCCR_BCRED_Pos);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004a6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80004aa:	683b      	ldr	r3, [r7, #0]
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	f443 027f 	orr.w	r2, r3, #16711680	; 0xff0000
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	62da      	str	r2, [r3, #44]	; 0x2c
	REG_SET_VAL(ltdc->BCCR, 0, 0xFFUL, LTDC_BCCR_BCBLUE_Pos);
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004c6:	683b      	ldr	r3, [r7, #0]
 80004c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	62da      	str	r2, [r3, #44]	; 0x2c
	REG_SET_VAL(ltdc->BCCR, 0, 0xFFUL, LTDC_BCCR_BCGREEN_Pos);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80004d6:	683b      	ldr	r3, [r7, #0]
 80004d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004de:	683b      	ldr	r3, [r7, #0]
 80004e0:	62da      	str	r2, [r3, #44]	; 0x2c

	// set polarization


	//enable peripheral
	REG_SET_BIT(ltdc->GCR, LTDC_GCR_LTDCEN_Pos);
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	699b      	ldr	r3, [r3, #24]
 80004e6:	f043 0201 	orr.w	r2, r3, #1
 80004ea:	683b      	ldr	r3, [r7, #0]
 80004ec:	619a      	str	r2, [r3, #24]
}
 80004ee:	bf00      	nop
 80004f0:	370c      	adds	r7, #12
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bc80      	pop	{r7}
 80004f6:	4770      	bx	lr
 80004f8:	40023800 	.word	0x40023800
 80004fc:	40016800 	.word	0x40016800

08000500 <_initSpiPins>:

static void _initSpiPins(){
 8000500:	b480      	push	{r7}
 8000502:	b087      	sub	sp, #28
 8000504:	af00      	add	r7, sp, #0
	RCC_TypeDef *pRCC = RCC;
 8000506:	4b73      	ldr	r3, [pc, #460]	; (80006d4 <_initSpiPins+0x1d4>)
 8000508:	617b      	str	r3, [r7, #20]
	GPIO_TypeDef *pGPIOA = GPIOA;
 800050a:	4b73      	ldr	r3, [pc, #460]	; (80006d8 <_initSpiPins+0x1d8>)
 800050c:	613b      	str	r3, [r7, #16]
	GPIO_TypeDef *pGPIOC = GPIOC;
 800050e:	4b73      	ldr	r3, [pc, #460]	; (80006dc <_initSpiPins+0x1dc>)
 8000510:	60fb      	str	r3, [r7, #12]
	GPIO_TypeDef *pGPIOD = GPIOD;
 8000512:	4b73      	ldr	r3, [pc, #460]	; (80006e0 <_initSpiPins+0x1e0>)
 8000514:	60bb      	str	r3, [r7, #8]
	GPIO_TypeDef *pGPIOF = GPIOF;
 8000516:	4b73      	ldr	r3, [pc, #460]	; (80006e4 <_initSpiPins+0x1e4>)
 8000518:	607b      	str	r3, [r7, #4]

	/* Enable the clock for GPIOA,C,D,F peripherals */
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOAEN_Pos);
 800051a:	697b      	ldr	r3, [r7, #20]
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	f043 0201 	orr.w	r2, r3, #1
 8000522:	697b      	ldr	r3, [r7, #20]
 8000524:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOCEN_Pos);
 8000526:	697b      	ldr	r3, [r7, #20]
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f043 0204 	orr.w	r2, r3, #4
 800052e:	697b      	ldr	r3, [r7, #20]
 8000530:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIODEN_Pos);
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f043 0208 	orr.w	r2, r3, #8
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	631a      	str	r2, [r3, #48]	; 0x30
	REG_SET_BIT(pRCC->AHB1ENR,RCC_AHB1ENR_GPIOFEN_Pos);
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f043 0220 	orr.w	r2, r3, #32
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	631a      	str	r2, [r3, #48]	; 0x30

	//RESX
	REG_SET_VAL(pGPIOA->MODER,0x1U,0x3,(LCD_RESX_PIN * 2U)); 		/*mode*/
 800054a:	693b      	ldr	r3, [r7, #16]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOA->OTYPER,LCD_RESX_PIN); 						/*Output type*/
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800056a:	693b      	ldr	r3, [r7, #16]
 800056c:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOA->OSPEEDR,2U,0x3U,(LCD_RESX_PIN * 2U)); 		/*speed*/
 800056e:	693b      	ldr	r3, [r7, #16]
 8000570:	689b      	ldr	r3, [r3, #8]
 8000572:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000576:	693b      	ldr	r3, [r7, #16]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	609a      	str	r2, [r3, #8]


	//CSX
	REG_SET_VAL(pGPIOC->MODER,0x1U,0x3,(LCD_CSX_PIN * 2U)); 		/*mode*/
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f043 0210 	orr.w	r2, r3, #16
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOC->OTYPER,LCD_CSX_PIN); 						/*Output type*/
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	685b      	ldr	r3, [r3, #4]
 80005a2:	f023 0204 	bic.w	r2, r3, #4
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOC->OSPEEDR,2U,0x3U,(LCD_CSX_PIN * 2U)); 		/*speed*/
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	609a      	str	r2, [r3, #8]
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	689b      	ldr	r3, [r3, #8]
 80005ba:	f043 0220 	orr.w	r2, r3, #32
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	609a      	str	r2, [r3, #8]

	//D/CX
	REG_SET_VAL(pGPIOD->MODER,0x1U,0x3,(LCD_DCX_PIN * 2U)); 		/*mode*/
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	68bb      	ldr	r3, [r7, #8]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOD->OTYPER,LCD_DCX_PIN); 					/*Output type*/
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80005e2:	68bb      	ldr	r3, [r7, #8]
 80005e4:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOD->OSPEEDR,2U,0x3U,(LCD_DCX_PIN * 2U)); 		/*speed*/
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80005ee:	68bb      	ldr	r3, [r7, #8]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	609a      	str	r2, [r3, #8]

	//SPI_CLK(PF7)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SCL_PIN * 2U));
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SCL_PIN);
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	685b      	ldr	r3, [r3, #4]
 800061a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SCL_PIN * 2U));
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	689b      	ldr	r3, [r3, #8]
 8000626:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	609a      	str	r2, [r3, #8]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[0],5U,0xFU,(LCD_SCL_PIN * 4U));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	6a1b      	ldr	r3, [r3, #32]
 800063e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	621a      	str	r2, [r3, #32]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6a1b      	ldr	r3, [r3, #32]
 800064a:	f043 42a0 	orr.w	r2, r3, #1342177280	; 0x50000000
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	621a      	str	r2, [r3, #32]

	//SPI_SDA(PF9)
	REG_SET_VAL(pGPIOF->MODER,2U,0x3U,(LCD_SDA_PIN * 2U));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pGPIOF->OTYPER,LCD_SDA_PIN);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	685b      	ldr	r3, [r3, #4]
 800066e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(pGPIOF->OSPEEDR,2U,0x3U,(LCD_SDA_PIN * 2U));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	609a      	str	r2, [r3, #8]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	689b      	ldr	r3, [r3, #8]
 8000686:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(pGPIOF->AFR[1],5U,0xFU,((LCD_SDA_PIN % 8) * 4U));
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	625a      	str	r2, [r3, #36]	; 0x24
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800069e:	f043 0250 	orr.w	r2, r3, #80	; 0x50
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24

	//CSX = HIGH
	REG_SET_BIT(pGPIOC->ODR,LCD_CSX_PIN);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	695b      	ldr	r3, [r3, #20]
 80006aa:	f043 0204 	orr.w	r2, r3, #4
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	615a      	str	r2, [r3, #20]
	//RESX = HIGH
	REG_SET_BIT(pGPIOA->ODR,LCD_RESX_PIN);
 80006b2:	693b      	ldr	r3, [r7, #16]
 80006b4:	695b      	ldr	r3, [r3, #20]
 80006b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80006ba:	693b      	ldr	r3, [r7, #16]
 80006bc:	615a      	str	r2, [r3, #20]
	//D/CX = HIGH
	REG_SET_BIT(pGPIOD->ODR,LCD_DCX_PIN);
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	695b      	ldr	r3, [r3, #20]
 80006c2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80006c6:	68bb      	ldr	r3, [r7, #8]
 80006c8:	615a      	str	r2, [r3, #20]

}
 80006ca:	bf00      	nop
 80006cc:	371c      	adds	r7, #28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	40023800 	.word	0x40023800
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020800 	.word	0x40020800
 80006e0:	40020c00 	.word	0x40020c00
 80006e4:	40021400 	.word	0x40021400

080006e8 <_initSpi>:

static void _initSpi(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
	SPI_TypeDef *pSPI = SPI;
 80006ee:	4b2e      	ldr	r3, [pc, #184]	; (80007a8 <_initSpi+0xc0>)
 80006f0:	607b      	str	r3, [r7, #4]
	RCC_TypeDef *pRCC = RCC;
 80006f2:	4b2e      	ldr	r3, [pc, #184]	; (80007ac <_initSpi+0xc4>)
 80006f4:	603b      	str	r3, [r7, #0]

	REG_SET_BIT(pRCC->APB2ENR,RCC_APB2ENR_SPI5EN_Pos);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	645a      	str	r2, [r3, #68]	; 0x44

	REG_SET_BIT(pSPI->CR1,SPI_CR1_MSTR_Pos); 		/*Controller mode*/
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f043 0204 	orr.w	r2, r3, #4
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIMODE_Pos);    /* BIDI mode enable*/
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);      /* Tx only*/
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_BIDIOE_Pos);		/* Tx only */
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_DFF_Pos);			/* DFF = 8bits */
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSM_Pos);			/* SSM enable */
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pSPI->CR1,SPI_CR1_SSI_Pos);			/* SSI enable */
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_LSBFIRST_Pos);     /* Send msb first */
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	601a      	str	r2, [r3, #0]
	REG_SET_VAL(pSPI->CR1,0x3U,0x7U,SPI_CR1_BR_Pos); /* SPI clck = 90MHz/16 ==> 5.625 MHz */
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	f043 0218 	orr.w	r2, r3, #24
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPOL_Pos); 		 /* CPOL = 0 */
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	f023 0202 	bic.w	r2, r3, #2
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR1,SPI_CR1_CPHA_Pos); 		 /* CPHA = 0 */
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 0201 	bic.w	r2, r3, #1
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
	REG_CLR_BIT(pSPI->CR2,SPI_CR2_FRF_Pos);			 /* SPI Motorola frame format*/
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	685b      	ldr	r3, [r3, #4]
 8000796:	f023 0210 	bic.w	r2, r3, #16
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	605a      	str	r2, [r3, #4]

}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr
 80007a8:	40015000 	.word	0x40015000
 80007ac:	40023800 	.word	0x40023800

080007b0 <BSP_initDisplay>:


void BSP_initDisplay(){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	_initSpiPins();
 80007b4:	f7ff fea4 	bl	8000500 <_initSpiPins>
	_initSpi();
 80007b8:	f7ff ff96 	bl	80006e8 <_initSpi>
	_initLtdcPins();
 80007bc:	f7ff fd16 	bl	80001ec <_initLtdcPins>
	_initLtdc();
 80007c0:	f7ff fdea 	bl	8000398 <_initLtdc>

}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <systemClockSetup>:
#include <reg_util.h>
#include <stm32f429xx.h>
#include <bsp_lcd.h>

void systemClockSetup()
{
 80007c8:	b480      	push	{r7}
 80007ca:	b085      	sub	sp, #20
 80007cc:	af00      	add	r7, sp, #0
	RCC_TypeDef *rcc = RCC; //RCC base address
 80007ce:	4b6d      	ldr	r3, [pc, #436]	; (8000984 <systemClockSetup+0x1bc>)
 80007d0:	60fb      	str	r3, [r7, #12]
	FLASH_TypeDef *flash = FLASH;
 80007d2:	4b6d      	ldr	r3, [pc, #436]	; (8000988 <systemClockSetup+0x1c0>)
 80007d4:	60bb      	str	r3, [r7, #8]
	PWR_TypeDef *pwr = PWR;
 80007d6:	4b6d      	ldr	r3, [pc, #436]	; (800098c <systemClockSetup+0x1c4>)
 80007d8:	607b      	str	r3, [r7, #4]

	//configure wait state for flash
	REG_SET_VAL(flash->ACR, FLASH_ACR_LATENCY_5WS, 0xFUL, FLASH_ACR_LATENCY_Pos);
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	f023 020f 	bic.w	r2, r3, #15
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f043 0205 	orr.w	r2, r3, #5
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	601a      	str	r2, [r3, #0]

	//configure overdrive to achieve 180Mhz
	REG_SET_BIT(rcc->APB1ENR, RCC_APB1ENR_PWREN_Pos);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	641a      	str	r2, [r3, #64]	; 0x40
	REG_SET_VAL(pwr->CR, 0x03, 0x3UL, PWR_CR_VOS_Pos);
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f443 4240 	orr.w	r2, r3, #49152	; 0xc000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	601a      	str	r2, [r3, #0]
	REG_SET_BIT(pwr->CR, PWR_CR_ODEN_Pos);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	601a      	str	r2, [r3, #0]
	while(! REG_READ_BIT(pwr->CSR, PWR_CSR_ODRDY_Pos));
 8000822:	bf00      	nop
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800082c:	2b00      	cmp	r3, #0
 800082e:	d0f9      	beq.n	8000824 <systemClockSetup+0x5c>
	REG_SET_BIT(pwr->CR, PWR_CR_ODSWEN_Pos);
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	601a      	str	r2, [r3, #0]

	//Configure PLL
	//VCO should between 1and 2Mhz
	//write 8 (8Mhz HSE/8 = 2Mhz), mask 3F to clear, position zero
	REG_SET_VAL(rcc->PLLCFGR,0x8U,0x3FU,RCC_PLLCFGR_PLLM_Pos);
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	685b      	ldr	r3, [r3, #4]
 8000840:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	685b      	ldr	r3, [r3, #4]
 800084c:	f043 0208 	orr.w	r2, r3, #8
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(rcc->PLLCFGR,180U,0x1FFU,RCC_PLLCFGR_PLLN_Pos);
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800085c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	6053      	str	r3, [r2, #4]
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	685b      	ldr	r3, [r3, #4]
 8000868:	f443 5234 	orr.w	r2, r3, #11520	; 0x2d00
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(rcc->PLLCFGR,0U,3U,RCC_PLLCFGR_PLLP_Pos);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	605a      	str	r2, [r3, #4]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	68fb      	ldr	r3, [r7, #12]
 8000882:	605a      	str	r2, [r3, #4]

	//Display dotclock PLLSAI
	REG_SET_VAL(rcc->PLLCFGR,50U,0x1FFUL,RCC_PLLSAICFGR_PLLSAIN_Pos);
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800088c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	6053      	str	r3, [r2, #4]
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	685b      	ldr	r3, [r3, #4]
 8000898:	f443 6248 	orr.w	r2, r3, #3200	; 0xc80
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(rcc->PLLCFGR,2U,0x7UL,RCC_PLLSAICFGR_PLLSAIR_Pos);
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	685b      	ldr	r3, [r3, #4]
 80008b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	605a      	str	r2, [r3, #4]
	REG_SET_VAL(rcc->DCKCFGR,8U,0x3UL,RCC_DCKCFGR_PLLSAIDIVR_Pos);
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80008ce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

	//enable PLLSAI
	REG_SET_BIT(rcc->CR, RCC_CR_PLLSAION_Pos);
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	601a      	str	r2, [r3, #0]
	while(!REG_READ_BIT(rcc->CR, RCC_CR_PLLSAIRDY_Pos));
 80008e4:	bf00      	nop
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d0f9      	beq.n	80008e6 <systemClockSetup+0x11e>

	//Configure AHB, APB1 and APB2
	REG_SET_VAL(rcc->CFGR, RCC_CFGR_HPRE_DIV1, 0xFUL, RCC_CFGR_HPRE_Pos); //no clock div, out 180Mhz
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	689b      	ldr	r3, [r3, #8]
 80008f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	689a      	ldr	r2, [r3, #8]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(rcc->CFGR, RCC_CFGR_PPRE1_DIV4, 0x7UL, RCC_CFGR_PPRE1_Pos); //APB1 45Mhz
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	689b      	ldr	r3, [r3, #8]
 800090a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	689b      	ldr	r3, [r3, #8]
 8000916:	f443 02a0 	orr.w	r2, r3, #5242880	; 0x500000
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	609a      	str	r2, [r3, #8]
	REG_SET_VAL(rcc->CFGR, RCC_CFGR_PPRE2_DIV2, 0x7UL, RCC_CFGR_PPRE2_Pos); //APB2 90Mhz
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000926:	68fb      	ldr	r3, [r7, #12]
 8000928:	609a      	str	r2, [r3, #8]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	609a      	str	r2, [r3, #8]


	//enable PLL and wait
	REG_SET_BIT(rcc->CR, RCC_CR_PLLON_Pos);
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	601a      	str	r2, [r3, #0]
	while(!REG_READ_BIT(rcc->CR, RCC_CR_PLLRDY_Pos));
 8000942:	bf00      	nop
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800094c:	2b00      	cmp	r3, #0
 800094e:	d0f9      	beq.n	8000944 <systemClockSetup+0x17c>

	//set PLL as sysclock
	REG_SET_VAL(rcc->CFGR, RCC_CFGR_SW_PLL, 0x3UL, RCC_CFGR_SW_Pos);
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	689b      	ldr	r3, [r3, #8]
 8000954:	f023 0203 	bic.w	r2, r3, #3
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	609a      	str	r2, [r3, #8]
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	689b      	ldr	r3, [r3, #8]
 8000960:	f043 0202 	orr.w	r2, r3, #2
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	609a      	str	r2, [r3, #8]
	while(!((REG_READ_VAL(rcc->CFGR, 0x3UL, RCC_CFGR_SWS_Pos))== RCC_CFGR_SW_PLL));
 8000968:	bf00      	nop
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	089b      	lsrs	r3, r3, #2
 8000970:	f003 0303 	and.w	r3, r3, #3
 8000974:	2b02      	cmp	r3, #2
 8000976:	d1f8      	bne.n	800096a <systemClockSetup+0x1a2>

}
 8000978:	bf00      	nop
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40023800 	.word	0x40023800
 8000988:	40023c00 	.word	0x40023c00
 800098c:	40007000 	.word	0x40007000

08000990 <main>:


int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	systemClockSetup();
 8000994:	f7ff ff18 	bl	80007c8 <systemClockSetup>
	BSP_initDisplay();
 8000998:	f7ff ff0a 	bl	80007b0 <BSP_initDisplay>
    /* Loop forever */
	for(;;);
 800099c:	e7fe      	b.n	800099c <main+0xc>
	...

080009a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009a2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009a4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopForever+0x6>)
  ldr r1, =_edata
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopForever+0xe>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopForever+0x16>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009ce:	f000 f811 	bl	80009f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009d2:	f7ff ffdd 	bl	8000990 <main>

080009d6 <LoopForever>:

LoopForever:
  b LoopForever
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
  ldr   r0, =_estack
 80009d8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80009dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009e0:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80009e4:	08000a74 	.word	0x08000a74
  ldr r2, =_sbss
 80009e8:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80009ec:	20000074 	.word	0x20000074

080009f0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009f0:	e7fe      	b.n	80009f0 <ADC_IRQHandler>
	...

080009f4 <__libc_init_array>:
 80009f4:	b570      	push	{r4, r5, r6, lr}
 80009f6:	4d0d      	ldr	r5, [pc, #52]	; (8000a2c <__libc_init_array+0x38>)
 80009f8:	4c0d      	ldr	r4, [pc, #52]	; (8000a30 <__libc_init_array+0x3c>)
 80009fa:	1b64      	subs	r4, r4, r5
 80009fc:	10a4      	asrs	r4, r4, #2
 80009fe:	2600      	movs	r6, #0
 8000a00:	42a6      	cmp	r6, r4
 8000a02:	d109      	bne.n	8000a18 <__libc_init_array+0x24>
 8000a04:	4d0b      	ldr	r5, [pc, #44]	; (8000a34 <__libc_init_array+0x40>)
 8000a06:	4c0c      	ldr	r4, [pc, #48]	; (8000a38 <__libc_init_array+0x44>)
 8000a08:	f000 f818 	bl	8000a3c <_init>
 8000a0c:	1b64      	subs	r4, r4, r5
 8000a0e:	10a4      	asrs	r4, r4, #2
 8000a10:	2600      	movs	r6, #0
 8000a12:	42a6      	cmp	r6, r4
 8000a14:	d105      	bne.n	8000a22 <__libc_init_array+0x2e>
 8000a16:	bd70      	pop	{r4, r5, r6, pc}
 8000a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a1c:	4798      	blx	r3
 8000a1e:	3601      	adds	r6, #1
 8000a20:	e7ee      	b.n	8000a00 <__libc_init_array+0xc>
 8000a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a26:	4798      	blx	r3
 8000a28:	3601      	adds	r6, #1
 8000a2a:	e7f2      	b.n	8000a12 <__libc_init_array+0x1e>
 8000a2c:	08000a6c 	.word	0x08000a6c
 8000a30:	08000a6c 	.word	0x08000a6c
 8000a34:	08000a6c 	.word	0x08000a6c
 8000a38:	08000a70 	.word	0x08000a70

08000a3c <_init>:
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	bf00      	nop
 8000a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a42:	bc08      	pop	{r3}
 8000a44:	469e      	mov	lr, r3
 8000a46:	4770      	bx	lr

08000a48 <_fini>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	bf00      	nop
 8000a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4e:	bc08      	pop	{r3}
 8000a50:	469e      	mov	lr, r3
 8000a52:	4770      	bx	lr
